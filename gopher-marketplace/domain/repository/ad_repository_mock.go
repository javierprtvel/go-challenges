// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/ad_repository.go

// Package mock_repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.mpi-internal.com/javier-porto/learning-go/domain"
)

// MockAdRepository is a mock of AdRepository interface.
type MockAdRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdRepositoryMockRecorder
}

// MockAdRepositoryMockRecorder is the mock recorder for MockAdRepository.
type MockAdRepositoryMockRecorder struct {
	mock *MockAdRepository
}

// NewMockAdRepository creates a new mock instance.
func NewMockAdRepository(ctrl *gomock.Controller) *MockAdRepository {
	mock := &MockAdRepository{ctrl: ctrl}
	mock.recorder = &MockAdRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdRepository) EXPECT() *MockAdRepositoryMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockAdRepository) FindById(id string) *domain.Ad {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*domain.Ad)
	return ret0
}

// FindById indicates an expected call of FindById.
func (mr *MockAdRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockAdRepository)(nil).FindById), id)
}

// FindByTitle mocks base method.
func (m *MockAdRepository) FindByTitle(title string) []domain.Ad {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTitle", title)
	ret0, _ := ret[0].([]domain.Ad)
	return ret0
}

// FindByTitle indicates an expected call of FindByTitle.
func (mr *MockAdRepositoryMockRecorder) FindByTitle(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTitle", reflect.TypeOf((*MockAdRepository)(nil).FindByTitle), title)
}

// Persist mocks base method.
func (m *MockAdRepository) Persist(ad domain.Ad) domain.Ad {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", ad)
	ret0, _ := ret[0].(domain.Ad)
	return ret0
}

// Persist indicates an expected call of Persist.
func (mr *MockAdRepositoryMockRecorder) Persist(ad interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockAdRepository)(nil).Persist), ad)
}

// Slice mocks base method.
func (m *MockAdRepository) Slice() []domain.Ad {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Slice")
	ret0, _ := ret[0].([]domain.Ad)
	return ret0
}

// Slice indicates an expected call of Slice.
func (mr *MockAdRepositoryMockRecorder) Slice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slice", reflect.TypeOf((*MockAdRepository)(nil).Slice))
}
